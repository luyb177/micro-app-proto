// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: api/order/v1/order.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderServiceAddOrder = "/order.v1.OrderService/AddOrder"
const OperationOrderServiceFindOrder = "/order.v1.OrderService/FindOrder"

type OrderServiceHTTPServer interface {
	AddOrder(context.Context, *AddOrderRequest) (*AddOrderReply, error)
	FindOrder(context.Context, *FindOrderRequest) (*FindOrderReply, error)
}

func RegisterOrderServiceHTTPServer(s *http.Server, srv OrderServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/order/add", _OrderService_AddOrder0_HTTP_Handler(srv))
	r.GET("/order/{id}", _OrderService_FindOrder0_HTTP_Handler(srv))
}

func _OrderService_AddOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceAddOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOrder(ctx, req.(*AddOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_FindOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceFindOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindOrder(ctx, req.(*FindOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindOrderReply)
		return ctx.Result(200, reply)
	}
}

type OrderServiceHTTPClient interface {
	AddOrder(ctx context.Context, req *AddOrderRequest, opts ...http.CallOption) (rsp *AddOrderReply, err error)
	FindOrder(ctx context.Context, req *FindOrderRequest, opts ...http.CallOption) (rsp *FindOrderReply, err error)
}

type OrderServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderServiceHTTPClient(client *http.Client) OrderServiceHTTPClient {
	return &OrderServiceHTTPClientImpl{client}
}

func (c *OrderServiceHTTPClientImpl) AddOrder(ctx context.Context, in *AddOrderRequest, opts ...http.CallOption) (*AddOrderReply, error) {
	var out AddOrderReply
	pattern := "/order/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceAddOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) FindOrder(ctx context.Context, in *FindOrderRequest, opts ...http.CallOption) (*FindOrderReply, error) {
	var out FindOrderReply
	pattern := "/order/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderServiceFindOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
