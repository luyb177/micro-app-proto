// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: api/user/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUsersGetUser = "/user.v1.Users/GetUser"
const OperationUsersPurchase = "/user.v1.Users/Purchase"
const OperationUsersRegister = "/user.v1.Users/Register"

type UsersHTTPServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	Purchase(context.Context, *PurchaseRequest) (*PurchaseReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
}

func RegisterUsersHTTPServer(s *http.Server, srv UsersHTTPServer) {
	r := s.Route("/")
	r.POST("/register", _Users_Register0_HTTP_Handler(srv))
	r.POST("/purchase", _Users_Purchase0_HTTP_Handler(srv))
	r.GET("/user/{id}", _Users_GetUser0_HTTP_Handler(srv))
}

func _Users_Register0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Users_Purchase0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PurchaseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersPurchase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Purchase(ctx, req.(*PurchaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PurchaseReply)
		return ctx.Result(200, reply)
	}
}

func _Users_GetUser0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

type UsersHTTPClient interface {
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	Purchase(ctx context.Context, req *PurchaseRequest, opts ...http.CallOption) (rsp *PurchaseReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type UsersHTTPClientImpl struct {
	cc *http.Client
}

func NewUsersHTTPClient(client *http.Client) UsersHTTPClient {
	return &UsersHTTPClientImpl{client}
}

func (c *UsersHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUsersGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UsersHTTPClientImpl) Purchase(ctx context.Context, in *PurchaseRequest, opts ...http.CallOption) (*PurchaseReply, error) {
	var out PurchaseReply
	pattern := "/purchase"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUsersPurchase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UsersHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUsersRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
