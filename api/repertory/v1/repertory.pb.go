// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.6
// source: api/repertory/v1/repertory.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Repertory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodId        uint32                 `protobuf:"varint,1,opt,name=good_id,json=goodId,proto3" json:"good_id,omitempty"`
	GoodName      string                 `protobuf:"bytes,2,opt,name=good_name,json=goodName,proto3" json:"good_name,omitempty"`
	GoodQuantity  uint32                 `protobuf:"varint,3,opt,name=good_quantity,json=goodQuantity,proto3" json:"good_quantity,omitempty"` // 库存数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Repertory) Reset() {
	*x = Repertory{}
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repertory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repertory) ProtoMessage() {}

func (x *Repertory) ProtoReflect() protoreflect.Message {
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repertory.ProtoReflect.Descriptor instead.
func (*Repertory) Descriptor() ([]byte, []int) {
	return file_api_repertory_v1_repertory_proto_rawDescGZIP(), []int{0}
}

func (x *Repertory) GetGoodId() uint32 {
	if x != nil {
		return x.GoodId
	}
	return 0
}

func (x *Repertory) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Repertory) GetGoodQuantity() uint32 {
	if x != nil {
		return x.GoodQuantity
	}
	return 0
}

type DecrRepertoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodId        int64                  `protobuf:"varint,1,opt,name=good_id,json=goodId,proto3" json:"good_id,omitempty"`
	GoodQuantity  uint32                 `protobuf:"varint,2,opt,name=good_quantity,json=goodQuantity,proto3" json:"good_quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecrRepertoryRequest) Reset() {
	*x = DecrRepertoryRequest{}
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecrRepertoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrRepertoryRequest) ProtoMessage() {}

func (x *DecrRepertoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrRepertoryRequest.ProtoReflect.Descriptor instead.
func (*DecrRepertoryRequest) Descriptor() ([]byte, []int) {
	return file_api_repertory_v1_repertory_proto_rawDescGZIP(), []int{1}
}

func (x *DecrRepertoryRequest) GetGoodId() int64 {
	if x != nil {
		return x.GoodId
	}
	return 0
}

func (x *DecrRepertoryRequest) GetGoodQuantity() uint32 {
	if x != nil {
		return x.GoodQuantity
	}
	return 0
}

type DecrRepertoryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecrRepertoryReply) Reset() {
	*x = DecrRepertoryReply{}
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecrRepertoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrRepertoryReply) ProtoMessage() {}

func (x *DecrRepertoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrRepertoryReply.ProtoReflect.Descriptor instead.
func (*DecrRepertoryReply) Descriptor() ([]byte, []int) {
	return file_api_repertory_v1_repertory_proto_rawDescGZIP(), []int{2}
}

func (x *DecrRepertoryReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type IncrRepertoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodId        uint32                 `protobuf:"varint,1,opt,name=good_id,json=goodId,proto3" json:"good_id,omitempty"`
	GoodQuantity  int32                  `protobuf:"varint,2,opt,name=good_quantity,json=goodQuantity,proto3" json:"good_quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncrRepertoryRequest) Reset() {
	*x = IncrRepertoryRequest{}
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrRepertoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrRepertoryRequest) ProtoMessage() {}

func (x *IncrRepertoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrRepertoryRequest.ProtoReflect.Descriptor instead.
func (*IncrRepertoryRequest) Descriptor() ([]byte, []int) {
	return file_api_repertory_v1_repertory_proto_rawDescGZIP(), []int{3}
}

func (x *IncrRepertoryRequest) GetGoodId() uint32 {
	if x != nil {
		return x.GoodId
	}
	return 0
}

func (x *IncrRepertoryRequest) GetGoodQuantity() int32 {
	if x != nil {
		return x.GoodQuantity
	}
	return 0
}

type IncrRepertoryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncrRepertoryReply) Reset() {
	*x = IncrRepertoryReply{}
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrRepertoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrRepertoryReply) ProtoMessage() {}

func (x *IncrRepertoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrRepertoryReply.ProtoReflect.Descriptor instead.
func (*IncrRepertoryReply) Descriptor() ([]byte, []int) {
	return file_api_repertory_v1_repertory_proto_rawDescGZIP(), []int{4}
}

func (x *IncrRepertoryReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetRepertoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodId        uint32                 `protobuf:"varint,1,opt,name=good_id,json=goodId,proto3" json:"good_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepertoryRequest) Reset() {
	*x = GetRepertoryRequest{}
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepertoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepertoryRequest) ProtoMessage() {}

func (x *GetRepertoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepertoryRequest.ProtoReflect.Descriptor instead.
func (*GetRepertoryRequest) Descriptor() ([]byte, []int) {
	return file_api_repertory_v1_repertory_proto_rawDescGZIP(), []int{5}
}

func (x *GetRepertoryRequest) GetGoodId() uint32 {
	if x != nil {
		return x.GoodId
	}
	return 0
}

type GetRepertoryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repertory     *Repertory             `protobuf:"bytes,1,opt,name=repertory,proto3" json:"repertory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepertoryReply) Reset() {
	*x = GetRepertoryReply{}
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepertoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepertoryReply) ProtoMessage() {}

func (x *GetRepertoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_repertory_v1_repertory_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepertoryReply.ProtoReflect.Descriptor instead.
func (*GetRepertoryReply) Descriptor() ([]byte, []int) {
	return file_api_repertory_v1_repertory_proto_rawDescGZIP(), []int{6}
}

func (x *GetRepertoryReply) GetRepertory() *Repertory {
	if x != nil {
		return x.Repertory
	}
	return nil
}

var File_api_repertory_v1_repertory_proto protoreflect.FileDescriptor

const file_api_repertory_v1_repertory_proto_rawDesc = "" +
	"\n" +
	" api/repertory/v1/repertory.proto\x12\frepertory.v1\x1a\x1cgoogle/api/annotations.proto\"f\n" +
	"\tRepertory\x12\x17\n" +
	"\agood_id\x18\x01 \x01(\rR\x06goodId\x12\x1b\n" +
	"\tgood_name\x18\x02 \x01(\tR\bgoodName\x12#\n" +
	"\rgood_quantity\x18\x03 \x01(\rR\fgoodQuantity\"T\n" +
	"\x14DecrRepertoryRequest\x12\x17\n" +
	"\agood_id\x18\x01 \x01(\x03R\x06goodId\x12#\n" +
	"\rgood_quantity\x18\x02 \x01(\rR\fgoodQuantity\".\n" +
	"\x12DecrRepertoryReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"T\n" +
	"\x14IncrRepertoryRequest\x12\x17\n" +
	"\agood_id\x18\x01 \x01(\rR\x06goodId\x12#\n" +
	"\rgood_quantity\x18\x02 \x01(\x05R\fgoodQuantity\".\n" +
	"\x12IncrRepertoryReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\".\n" +
	"\x13GetRepertoryRequest\x12\x17\n" +
	"\agood_id\x18\x01 \x01(\rR\x06goodId\"J\n" +
	"\x11GetRepertoryReply\x125\n" +
	"\trepertory\x18\x01 \x01(\v2\x17.repertory.v1.RepertoryR\trepertory2\xea\x02\n" +
	"\x10RepertoryService\x12q\n" +
	"\rDecrRepertory\x12\".repertory.v1.DecrRepertoryRequest\x1a .repertory.v1.DecrRepertoryReply\"\x1a\x82\xd3\xe4\x93\x02\x14:\x01*\"\x0f/repertory/decr\x12q\n" +
	"\rIncrRepertory\x12\".repertory.v1.IncrRepertoryRequest\x1a .repertory.v1.IncrRepertoryReply\"\x1a\x82\xd3\xe4\x93\x02\x14:\x01*\"\x0f/repertory/incr\x12p\n" +
	"\fGetRepertory\x12!.repertory.v1.GetRepertoryRequest\x1a\x1f.repertory.v1.GetRepertoryReply\"\x1c\x82\xd3\xe4\x93\x02\x16\x12\x14/repertory/{good_id}B\x15Z\x13api/repertory/v1;v1b\x06proto3"

var (
	file_api_repertory_v1_repertory_proto_rawDescOnce sync.Once
	file_api_repertory_v1_repertory_proto_rawDescData []byte
)

func file_api_repertory_v1_repertory_proto_rawDescGZIP() []byte {
	file_api_repertory_v1_repertory_proto_rawDescOnce.Do(func() {
		file_api_repertory_v1_repertory_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_repertory_v1_repertory_proto_rawDesc), len(file_api_repertory_v1_repertory_proto_rawDesc)))
	})
	return file_api_repertory_v1_repertory_proto_rawDescData
}

var file_api_repertory_v1_repertory_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_repertory_v1_repertory_proto_goTypes = []any{
	(*Repertory)(nil),            // 0: repertory.v1.Repertory
	(*DecrRepertoryRequest)(nil), // 1: repertory.v1.DecrRepertoryRequest
	(*DecrRepertoryReply)(nil),   // 2: repertory.v1.DecrRepertoryReply
	(*IncrRepertoryRequest)(nil), // 3: repertory.v1.IncrRepertoryRequest
	(*IncrRepertoryReply)(nil),   // 4: repertory.v1.IncrRepertoryReply
	(*GetRepertoryRequest)(nil),  // 5: repertory.v1.GetRepertoryRequest
	(*GetRepertoryReply)(nil),    // 6: repertory.v1.GetRepertoryReply
}
var file_api_repertory_v1_repertory_proto_depIdxs = []int32{
	0, // 0: repertory.v1.GetRepertoryReply.repertory:type_name -> repertory.v1.Repertory
	1, // 1: repertory.v1.RepertoryService.DecrRepertory:input_type -> repertory.v1.DecrRepertoryRequest
	3, // 2: repertory.v1.RepertoryService.IncrRepertory:input_type -> repertory.v1.IncrRepertoryRequest
	5, // 3: repertory.v1.RepertoryService.GetRepertory:input_type -> repertory.v1.GetRepertoryRequest
	2, // 4: repertory.v1.RepertoryService.DecrRepertory:output_type -> repertory.v1.DecrRepertoryReply
	4, // 5: repertory.v1.RepertoryService.IncrRepertory:output_type -> repertory.v1.IncrRepertoryReply
	6, // 6: repertory.v1.RepertoryService.GetRepertory:output_type -> repertory.v1.GetRepertoryReply
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_repertory_v1_repertory_proto_init() }
func file_api_repertory_v1_repertory_proto_init() {
	if File_api_repertory_v1_repertory_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_repertory_v1_repertory_proto_rawDesc), len(file_api_repertory_v1_repertory_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_repertory_v1_repertory_proto_goTypes,
		DependencyIndexes: file_api_repertory_v1_repertory_proto_depIdxs,
		MessageInfos:      file_api_repertory_v1_repertory_proto_msgTypes,
	}.Build()
	File_api_repertory_v1_repertory_proto = out.File
	file_api_repertory_v1_repertory_proto_goTypes = nil
	file_api_repertory_v1_repertory_proto_depIdxs = nil
}
