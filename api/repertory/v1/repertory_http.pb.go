// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: api/repertory/v1/repertory.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRepertoryServiceAddGoods = "/repertory.v1.RepertoryService/AddGoods"
const OperationRepertoryServiceFindRepertory = "/repertory.v1.RepertoryService/FindRepertory"

type RepertoryServiceHTTPServer interface {
	AddGoods(context.Context, *AddRepertoryRequest) (*AddRepertoryReply, error)
	FindRepertory(context.Context, *FindRepertoryRequest) (*FindRepertoryReply, error)
}

func RegisterRepertoryServiceHTTPServer(s *http.Server, srv RepertoryServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/repertory/add", _RepertoryService_AddGoods0_HTTP_Handler(srv))
	r.GET("/repertory/{id}", _RepertoryService_FindRepertory0_HTTP_Handler(srv))
}

func _RepertoryService_AddGoods0_HTTP_Handler(srv RepertoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRepertoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRepertoryServiceAddGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddGoods(ctx, req.(*AddRepertoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRepertoryReply)
		return ctx.Result(200, reply)
	}
}

func _RepertoryService_FindRepertory0_HTTP_Handler(srv RepertoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindRepertoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRepertoryServiceFindRepertory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindRepertory(ctx, req.(*FindRepertoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindRepertoryReply)
		return ctx.Result(200, reply)
	}
}

type RepertoryServiceHTTPClient interface {
	AddGoods(ctx context.Context, req *AddRepertoryRequest, opts ...http.CallOption) (rsp *AddRepertoryReply, err error)
	FindRepertory(ctx context.Context, req *FindRepertoryRequest, opts ...http.CallOption) (rsp *FindRepertoryReply, err error)
}

type RepertoryServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRepertoryServiceHTTPClient(client *http.Client) RepertoryServiceHTTPClient {
	return &RepertoryServiceHTTPClientImpl{client}
}

func (c *RepertoryServiceHTTPClientImpl) AddGoods(ctx context.Context, in *AddRepertoryRequest, opts ...http.CallOption) (*AddRepertoryReply, error) {
	var out AddRepertoryReply
	pattern := "/repertory/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRepertoryServiceAddGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RepertoryServiceHTTPClientImpl) FindRepertory(ctx context.Context, in *FindRepertoryRequest, opts ...http.CallOption) (*FindRepertoryReply, error) {
	var out FindRepertoryReply
	pattern := "/repertory/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRepertoryServiceFindRepertory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
