// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: api/repertory/v1/repertory.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepertoryService_DecrRepertory_FullMethodName = "/repertory.v1.RepertoryService/DecrRepertory"
	RepertoryService_IncrRepertory_FullMethodName = "/repertory.v1.RepertoryService/IncrRepertory"
	RepertoryService_GetRepertory_FullMethodName  = "/repertory.v1.RepertoryService/GetRepertory"
)

// RepertoryServiceClient is the client API for RepertoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepertoryServiceClient interface {
	// 减库存
	DecrRepertory(ctx context.Context, in *DecrRepertoryRequest, opts ...grpc.CallOption) (*DecrRepertoryReply, error)
	// 加库存
	IncrRepertory(ctx context.Context, in *DecrRepertoryRequest, opts ...grpc.CallOption) (*IncrRepertoryReply, error)
	GetRepertory(ctx context.Context, in *GetRepertoryRequest, opts ...grpc.CallOption) (*GetRepertoryReply, error)
}

type repertoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepertoryServiceClient(cc grpc.ClientConnInterface) RepertoryServiceClient {
	return &repertoryServiceClient{cc}
}

func (c *repertoryServiceClient) DecrRepertory(ctx context.Context, in *DecrRepertoryRequest, opts ...grpc.CallOption) (*DecrRepertoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecrRepertoryReply)
	err := c.cc.Invoke(ctx, RepertoryService_DecrRepertory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repertoryServiceClient) IncrRepertory(ctx context.Context, in *DecrRepertoryRequest, opts ...grpc.CallOption) (*IncrRepertoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrRepertoryReply)
	err := c.cc.Invoke(ctx, RepertoryService_IncrRepertory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repertoryServiceClient) GetRepertory(ctx context.Context, in *GetRepertoryRequest, opts ...grpc.CallOption) (*GetRepertoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepertoryReply)
	err := c.cc.Invoke(ctx, RepertoryService_GetRepertory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepertoryServiceServer is the server API for RepertoryService service.
// All implementations must embed UnimplementedRepertoryServiceServer
// for forward compatibility.
type RepertoryServiceServer interface {
	// 减库存
	DecrRepertory(context.Context, *DecrRepertoryRequest) (*DecrRepertoryReply, error)
	// 加库存
	IncrRepertory(context.Context, *DecrRepertoryRequest) (*IncrRepertoryReply, error)
	GetRepertory(context.Context, *GetRepertoryRequest) (*GetRepertoryReply, error)
	mustEmbedUnimplementedRepertoryServiceServer()
}

// UnimplementedRepertoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepertoryServiceServer struct{}

func (UnimplementedRepertoryServiceServer) DecrRepertory(context.Context, *DecrRepertoryRequest) (*DecrRepertoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrRepertory not implemented")
}
func (UnimplementedRepertoryServiceServer) IncrRepertory(context.Context, *DecrRepertoryRequest) (*IncrRepertoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrRepertory not implemented")
}
func (UnimplementedRepertoryServiceServer) GetRepertory(context.Context, *GetRepertoryRequest) (*GetRepertoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepertory not implemented")
}
func (UnimplementedRepertoryServiceServer) mustEmbedUnimplementedRepertoryServiceServer() {}
func (UnimplementedRepertoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeRepertoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepertoryServiceServer will
// result in compilation errors.
type UnsafeRepertoryServiceServer interface {
	mustEmbedUnimplementedRepertoryServiceServer()
}

func RegisterRepertoryServiceServer(s grpc.ServiceRegistrar, srv RepertoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRepertoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepertoryService_ServiceDesc, srv)
}

func _RepertoryService_DecrRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrRepertoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServiceServer).DecrRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepertoryService_DecrRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServiceServer).DecrRepertory(ctx, req.(*DecrRepertoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepertoryService_IncrRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrRepertoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServiceServer).IncrRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepertoryService_IncrRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServiceServer).IncrRepertory(ctx, req.(*DecrRepertoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepertoryService_GetRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepertoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServiceServer).GetRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepertoryService_GetRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServiceServer).GetRepertory(ctx, req.(*GetRepertoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepertoryService_ServiceDesc is the grpc.ServiceDesc for RepertoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepertoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repertory.v1.RepertoryService",
	HandlerType: (*RepertoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecrRepertory",
			Handler:    _RepertoryService_DecrRepertory_Handler,
		},
		{
			MethodName: "IncrRepertory",
			Handler:    _RepertoryService_IncrRepertory_Handler,
		},
		{
			MethodName: "GetRepertory",
			Handler:    _RepertoryService_GetRepertory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/repertory/v1/repertory.proto",
}
